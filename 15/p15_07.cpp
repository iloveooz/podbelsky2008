//p15_07.cpp - односвязный список объектов разных классов

	#include <iostream>
	using namespace std;
	
	// конкретные классы, производные от figure
	#include "realFigures.h"
	
	// класс объектов-элементов в односвязном списке
	class chain {
		// указатель в объекте на следующий элемент
		chain *next;
		
		// указатель на фигуру в элементе списка
		figure *pfig;
		
	public:
		// указатель на начало списка
		static chain *begin;
		
		// указатель на последний элемент в списке
		static chain *last;
		
		// конструктор
		chain(figure *p);
		
		// площадь всех фигур списка
		static double areaAll();
	};
	
	// инициализация статических компонентов класса
	// начало списка
	chain *chain::begin = 0;
	
	// последний элемент в списке
	chain *chain::last = 0;
	
	// площадь всех фигур списка
	double chain::areaAll() {
		double ss = 0.0;
		// настройка на начало списка
		chain *uk = begin;
	
		// цикл до конца списка
		while (uk != NULL) {
			// площадь конкретной фигуры
			ss += uk->pfig->area();
			// настройка на следующий элемент
			uk = uk->next;
		}
	return ss;
	}
	
	// конструктор создаёт и включает в список объект, связав его с 
	// конкретной фигурой из класса, производного от абстрактного
	
	// р-адрес включаемой фигуры
	chain::chain(figure *p) {
		// определили начало списка
		if(begin == NULL) 
			begin = this;
		else
			// связь с предыдущим элементом
			last->next = this;
		// запоминаем адрес включаемой фигуры
		pfig = p;
		
		// пометим окончание списка
		next = NULL;
		
		// запоминаем адрес последнего элемента списка
		last = this;
	}
	
	int main() {
		ellipse E(10.0, 8.0, 30.0, 20.0);
		cout << "Площадь " << E.className() << " = " << E.area() << endl;

		square S(1.2, 3.3, 5.0, 6.0);
		cout << "Площадь " << S.className() << " = " << S.area() << endl;
				
		// включить в список прямоугольник
		chain cs(&S); 
		
		// включить в список эллипс
		chain ce(&E);
		
		// вторично включить в список прямоугольник
		chain cs2(&S);
		
		cout << "Общая площадь: " << chain::areaAll() << endl;
		return 0;
	}
	
	
